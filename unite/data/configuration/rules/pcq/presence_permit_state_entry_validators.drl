<?xml version="1.0"?>

<rule-set name="presence_permit_state_entry_validators"
          xmlns="http://drools.org/rules"
          xmlns:java="http://drools.org/semantics/java"
          xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"
          xs:schemaLocation="http://drools.org/rules rules.xsd
                            http://drools.org/semantics/java java.xsd">

    <java:import>ibanx.event.LifecycleEvent</java:import>
    <java:import>java.util.Hashtable</java:import>
    <java:import>ibanx.util.ObjectUtil</java:import>
    <java:import>ibanx.util.PermitLinkUtil</java:import>
    <java:import>ibanx.util.PermitUtil</java:import>
    <java:import>ibanx.permit.PermitIF</java:import>
    <java:import>ibanx.object.LifecycleManagedIF</java:import>
    <java:import>ibanx.object.BusinessObjectIF</java:import>
    <java:import>ibanx.tra.TaskRiskAnalysisIF</java:import>
    <java:import>ibanx.tra.RiskAssessmentIF</java:import>

    <application-data identifier="log">org.apache.log4j.Logger</application-data>
    <application-data identifier="applicationSettings">ibanx.configuration.ApplicationSettings</application-data>
    <application-data identifier="pluginManager">ibanx.plugin.PluginManager</application-data>

    <rule name="handout-validate-startdate-before-enddate" salience="1000">
        <parameter identifier="event"><class>LifecycleEvent</class></parameter>
        <parameter identifier="permit"><class>PermitIF</class></parameter>
        <parameter identifier="result"><class>Hashtable</class></parameter>
        <java:condition>!result.containsKey("PlannedStartDateAfterPlannedEndDate")</java:condition>
        <java:condition>ObjectUtil.hasValue(event.getNextState(), "name", "O_AC")</java:condition>
        <java:condition>ObjectUtil.isBefore(permit.getPlannedEndDate(), permit.getPlannedStartDate())</java:condition>
        <java:consequence>
            String messageKey = "PlannedStartDateAfterPlannedEndDate";
            result.put(messageKey, messageKey);
            drools.modifyObject(result);
        </java:consequence>
    </rule>
    <rule name="handout-validate-startdate-not-in-the-future" salience="1000">
        <parameter identifier="event"><class>LifecycleEvent</class></parameter>
        <parameter identifier="permit"><class>PermitIF</class></parameter>
        <parameter identifier="result"><class>Hashtable</class></parameter>
        <java:condition>!result.containsKey("PlannedStartDateIsInTheFuture")</java:condition>
        <java:condition>ObjectUtil.hasValue(event.getNextState(), "name", "O_AC")</java:condition>
        <java:condition>ObjectUtil.isAfterToday(permit.getPlannedStartDate())</java:condition>
        <java:consequence>
            String messageKey = "PlannedStartDateIsInTheFuture";
            result.put(messageKey, messageKey);
            drools.modifyObject(result);
        </java:consequence>
    </rule>
    <rule name="handout-validate-enddate-not-in-the-past" salience="1000">
        <parameter identifier="event"><class>LifecycleEvent</class></parameter>
        <parameter identifier="permit"><class>PermitIF</class></parameter>
        <parameter identifier="result"><class>Hashtable</class></parameter>
        <java:condition>!result.containsKey("PlannedEndDateIsInThePast")</java:condition>
        <java:condition>ObjectUtil.hasValue(event.getNextState(), "name", "O_AC")</java:condition>
        <java:condition>ObjectUtil.isBeforeToday(permit.getPlannedEndDate())</java:condition>
        <java:consequence>
            String messageKey = "PlannedEndDateIsInThePast";
            result.put(messageKey, messageKey);
            drools.modifyObject(result);
        </java:consequence>
    </rule>
</rule-set>
