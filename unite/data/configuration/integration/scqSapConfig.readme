This file explains how to configure the SCQ SAP field mapping and the BAPI calls to make

=== FIELD MAPPING===
* You can configure which field(s) or literal value(s) map to which SAP field
* You can configure transformers to apply before writing to the SAP field. Available transformers:
    "concat",               // joins multiple fields together using a blank space (" ") as separator
    "akzoStripTokens",      // replaces linefeeds with a hash (#)
    "akzoTickIfNotEmpty",   // writes a "X" if the field is not empty and a blank space (" ") otherwise
    "stringToDate",         // converts a string field to a date using supported patterns in Unite 5.8
    "firstNonEmpty"         // writes the first field value which is not empty (WARNING: if the field doesn't exist in the LogEvent the literal value is written instead!)
* You can also write to different SAP table(s) instead of to the default one

Below is an example of a simple SAP config:
{
    "mapping": {                                            // this section is to configure how to map Unite fields to SAP fields
        "NOTIF_TYPE": {                                     // name of the SAP field
            "values": ["6N"]                                // values to map to the SAP field, it can be a field name or a literal value
        },
        "SHORT_TEXT": {
            "values": ["shortText"],                        // in this case it's a field name
            "transformers": ["akzoStripTokens"]             // applying a transformer
        },
        "TEXT_LINE":{
            "values":["number","title"],                    // write multiple fields to a SAP field
            "transformers":["concat","akzoStripTokens"],    // applying multiple transformers (left to right). In this case we merge multiple fields to one field using the concat transformer
            "tables":["NOTIF_LONGTEXT"]                     // write to a separate table
        }
    },
    "bapiSequence": [                                       // This section determines which BAPI calls to make
    	{
    		"function":"Z_BAPI_NOTIF_CREATE",               // You can configure the name of the BAPI function to execute
    		"convert": true                                 // When specifying "convert":true, the request for work will be converted, using the mapping above, before executing the BAPI function
    	},
        {
    		"function":"Z_BAPI_NOTIF_CREATE",               // You can specify the same function multiple times, but it will only be executed once. You can, however, use it to retrieve the notification number from after executing it.
    		"table":"NOTIFHEADER",                          // If you configure a table it will be retrieved from the BAPI function and you can read/write to it
    		"source":"NOTIF_NO"                             // If you configure a source (and a table), it will be used to fetch the notification number from
    	},
    	{
    		"function": "BAPI_ALM_NOTIF_GET_DETAIL",
    		"target":"NUMBER",                              // If you configure a target (and a table), it will be used to write the notification number to
    		"table":"NOTLONGTXT"
    	}

    ]
}

If you want to make sure your config is valid (no checking on typos in names of tables and functions):
use http://json-schema-validator.herokuapp.com/, paste in the schema and your JSON and validate it.

