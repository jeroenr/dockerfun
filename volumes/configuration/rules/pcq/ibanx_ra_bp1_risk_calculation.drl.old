<?xml version="1.0"?>

<rule-set name="ibanx_ra_bp1_risk_calculation"
          xmlns="http://drools.org/rules"
          xmlns:java="http://drools.org/semantics/java"
          xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"
          xs:schemaLocation="http://drools.org/rules rules.xsd
                             http://drools.org/semantics/java java.xsd">

    <java:import>java.lang.String</java:import>
    <java:import>java.util.HashMap</java:import>

    <java:import>ibanx.persistence.object.PersistableIF</java:import>
    <java:import>ibanx.services.stproc.StProcHelper</java:import>

    <java:import>ibanx.tra.RiskAssessmentIF</java:import>
    <java:import>ibanx.util.ValueListUtil</java:import>
    <java:import>ibanx.util.ObjectUtil</java:import>
    <java:import>ibanx.rules.Semaphore</java:import>
    <java:import>ibanx.ext.stproc.ra.RACalculationUtil</java:import>

    <application-data identifier="log">org.apache.log4j.Logger</application-data>
    <application-data identifier="applicationSettings">ibanx.configuration.ApplicationSettings</application-data>

    <rule name="test0" >
        <parameter identifier="ra"><class>RiskAssessmentIF</class></parameter>
        <java:condition>ra.get("riskValue","0").equals("0")</java:condition>
        <java:consequence>
            log.debug("test0");
        </java:consequence>
    </rule>
    <rule name="test1" >
            <parameter identifier="ra"><class>RiskAssessmentIF</class></parameter>
            <java:condition>ra.get("riskValue","1").equals("1")</java:condition>
            <java:consequence>
                log.debug("test1");
            </java:consequence>
        </rule>
    <rule name="test2" >
            <parameter identifier="ra"><class>RiskAssessmentIF</class></parameter>
            <java:condition>ra.get("riskValue","2").equals("2")</java:condition>
            <java:consequence>
                log.debug("test2");
            </java:consequence>
        </rule>
     <rule name="test3" >
        <parameter identifier="ra"><class>RiskAssessmentIF</class></parameter>
        <java:condition>ra.get("riskValue","3").equals("3")</java:condition>
        <java:consequence>
            log.debug("test3");
        </java:consequence>
    </rule>

    <rule name="init rule risk determination" salience="1000000">
        <parameter identifier="ra"><class>RiskAssessmentIF</class></parameter>
        <java:condition>ObjectUtil.notHasValue(ra,"tmp_rrd_initialized","true")</java:condition>
        <java:consequence>
            log.debug("initialization");
            ObjectUtil.update(ra,"avTraRequired","No");
            ObjectUtil.update(ra,"avTraOptional","false");

            ObjectUtil.update(ra,"avDELTALINQS_PERMITRequired","No");
            ObjectUtil.update(ra,"avDELTALINQS_PERMITOptional","false");

            // RULE, we default always back to be determined!
            ObjectUtil.update(ra,"riskValue","3");

            // PTW is required
            ObjectUtil.update(ra,"avDELTALINQS_PERMITRequired","Yes");
            ObjectUtil.update(ra,"avDELTALINQS_PERMITOptional","false");
            // TRA is optional
            ObjectUtil.update(ra,"avTraRequired","No");
            ObjectUtil.update(ra,"avTraOptional","true");

            ObjectUtil.update(ra,"tmp_rrd_initialized","true");

            drools.assertObject(new Semaphore("calculation",false));
            drools.modifyObject(ra);
            log.debug("finish initialization");
        </java:consequence>
    </rule>

    <rule name="RA with high (1) risk calculation">
        <parameter identifier="ra"><class>RiskAssessmentIF</class></parameter>
        <java:condition>ra.get("riskValue","").equals("1")</java:condition>
        <java:consequence>
            log.debug("determine if permit to work required");

            // PTW is required
            ObjectUtil.update(ra,"avDELTALINQS_PERMITRequired","Yes");
            ObjectUtil.update(ra,"avDELTALINQS_PERMITOptional","false");
            // no presence is allowed
            ObjectUtil.update(ra,"avPRESENCE_PERMITRequired","No");
            ObjectUtil.update(ra,"avPRESENCE_PERMITOptional","false");
            // TRA is required
            ObjectUtil.update(ra,"avTraRequired","Yes");
            ObjectUtil.update(ra,"avTraOptional","false");
        </java:consequence>
    </rule>


    <rule name="RA with minimal (2) risk calculation">
        <parameter identifier="ra"><class>RiskAssessmentIF</class></parameter>
        <java:condition>ra.get("riskValue","").equals("2")</java:condition>
        <java:consequence>
            log.debug("determine if permit-to-work optional");
            // ptw is optional
            ObjectUtil.update(ra,"avDELTALINQS_PERMITRequired","No");
            ObjectUtil.update(ra,"avDELTALINQS_PERMITOptional","true");
            // presence is allowed
            ObjectUtil.update(ra,"avPRESENCE_PERMITRequired","Yes");
            ObjectUtil.update(ra,"avPRESENCE_PERMITOptional","false");
            // TRA is not allowed
            ObjectUtil.update(ra,"avTraRequired","No");
            ObjectUtil.update(ra,"avTraOptional","false");
        </java:consequence>
    </rule>

    <rule name="RA with TBD (0) risk calculation" >
        <parameter identifier="ra"><class>RiskAssessmentIF</class></parameter>
        <java:condition>ra.get("riskValue","").equals("0")</java:condition>
        <java:consequence>
            log.debug("determine if permit-to-work optional");
            // ptw is optional
            ObjectUtil.update(ra,"avDELTALINQS_PERMITRequired","No");
            ObjectUtil.update(ra,"avDELTALINQS_PERMITOptional","true");
            // presence is not allowed
            ObjectUtil.update(ra,"avPRESENCE_PERMITRequired","No");
            ObjectUtil.update(ra,"avPRESENCE_PERMITOptional","false");
            // TRA is not allowed
            ObjectUtil.update(ra,"avTraRequired","No");
            ObjectUtil.update(ra,"avTraOptional","false");
        </java:consequence>
    </rule>


    <!--
        LABEL_RISK_0	Te bepalen risico	Risk to be determined
        LABEL_RISK_1	Hoog risico	        High risk
        LABEL_RISK_2	Minimaal risico	    Minimal risk
        LABEL_RISK_3	Normaal risico	    Normal risk
    -->

    <rule name="A1" salience="10">
        <parameter identifier="ra"><class>RiskAssessmentIF</class></parameter>
        <java:condition>RACalculationUtil.getCheckboxCount("a",ra) > 1</java:condition>
        <java:consequence>
            ObjectUtil.update(ra,"riskValue","1");

            ObjectUtil.update(ra,"avDELTALINQS_PERMITRequired","Yes");
            ObjectUtil.update(ra,"avDELTALINQS_PERMITOptional","false");

            ObjectUtil.update(ra,"avTraRequired","Yes");
            ObjectUtil.update(ra,"avTraOptional","false");
        </java:consequence>
    </rule>

    <!-- risk determination cleanup : always ecexute ad the last riskdetermination rule-->
    <rule name="cleanup initialization and risk calculation" salience="-100">
        <parameter identifier="ra"><class>RiskAssessmentIF</class></parameter>
        <java:condition>1==1</java:condition>
        <java:consequence>
            log.debug("Last rule!!! clean up");

            //log.debug("initialization clean up");
            ra.removeAbstractAttribute("tmp_rrd_initialized");
            //log.debug("finish initialization clean up");
        </java:consequence>
    </rule>
</rule-set>