<?xml version="1.0"?>
<rule-set name="deltalinqs_stop_permit_decorators"
          xmlns="http://drools.org/rules"
          xmlns:java="http://drools.org/semantics/java"
          xmlns:xs="http://www.w3.org/2001/XMLSchema-instance"
          xs:schemaLocation="http://drools.org/rules rules.xsd
                             http://drools.org/semantics/java java.xsd">

    <java:import>ibanx.persistence.object.PersistableIF</java:import>
    <java:import>ibanx.permit.PermitIF</java:import>
    <java:import>java.lang.String</java:import>
    <java:import>ibanx.util.ValueListUtil</java:import>
    <java:import>ibanx.util.ObjectUtil</java:import>
    <java:import>ibanx.util.PermitUtil</java:import>
    <java:import>ibanx.util.PermitLinkUtil</java:import>
    <java:import>ibanx.org.UserIF</java:import>

    <application-data identifier="log">org.apache.log4j.Logger</application-data>
    <application-data identifier="applicationSettings">ibanx.configuration.ApplicationSettings</application-data>
    <application-data identifier="errors">java.util.Hashtable</application-data>

	<rule name="set default values for the permit signatures once" salience="10000000">
        <parameter identifier="permit"><class>PermitIF</class></parameter>
        <java:condition>ObjectUtil.notHasValue(permit,"flagSignaturesInitialized","true")</java:condition>
        <java:consequence>
            ObjectUtil.makeSignatureNotApplicable(permit,"B_MO1");
            ObjectUtil.makeSignatureNotApplicable(permit,"B_MO2");
            ObjectUtil.makeSignatureNotApplicable(permit,"B_MO3");

            ObjectUtil.update(permit,"flagSignaturesInitialized","true");
            drools.modifyObject(permit);
        </java:consequence>
    </rule>

    <!-- START RISK DETERMINATION RULES ON PERMIT -->
	<rule name="set additional docs when risk is high (1)">
		<parameter identifier="permit"><class>PermitIF</class></parameter>
		<java:condition>ObjectUtil.hasValue(permit,"riscCategory","1")</java:condition>
		<java:condition>!permit.isNewPermitFormRiskAssessment()</java:condition>
		<java:condition>!PermitLinkUtil.hasRiskAssessment(permit)</java:condition>
		<java:consequence>
			ObjectUtil.update(permit,"avTraRequired","Yes");
			ObjectUtil.update(permit,"avTraOptional","false");
		</java:consequence>
	</rule>
	<rule name="set additional docs when risk is normal (3)">
		<parameter identifier="permit"><class>PermitIF</class></parameter>
		<java:condition>ObjectUtil.hasValue(permit,"riscCategory","3")</java:condition>
		<java:condition>!permit.isNewPermitFormRiskAssessment()</java:condition>
		<java:condition>!PermitLinkUtil.hasRiskAssessment(permit)</java:condition>
		<java:consequence>
			ObjectUtil.update(permit,"avTraRequired","No");
			ObjectUtil.update(permit,"avTraOptional","true");
		</java:consequence>
	</rule>
	<rule name="set additional docs when risk is limited or not set (1)">
		<parameter identifier="permit"><class>PermitIF</class></parameter>
		<java:condition>ObjectUtil.hasAnyValue(permit,"riscCategory","0,2")</java:condition>
		<java:condition>!permit.isNewPermitFormRiskAssessment()</java:condition>
		<java:condition>!PermitLinkUtil.hasRiskAssessment(permit)</java:condition>
		<java:consequence>
			ObjectUtil.update(permit,"avTraRequired","No");
			ObjectUtil.update(permit,"avTraOptional","false");
		</java:consequence>
	</rule>

    <!-- trigger higher risk decorators first, before lower risk decorators by using the salience property

         only set riscCategory on the permit when there is NO user override
    -->

    <!-- high risk rules -->

    <!--
    <rule name="set high risk on x-ray radiation" salience="1500">
        <parameter identifier="permit"><class>PermitIF</class></parameter>
        <java:condition>ObjectUtil.hasValue(permit,"wwRontgenStralingRequired","Yes")</java:condition>
        <java:condition>ObjectUtil.notHasValue(permit,"ruleRiscCategory", "1")</java:condition>
        <java:consequence>
            int raAdvice = PermitUtil.getRiskAssessmentRiskAdvice(permit);

            if(raAdvice != 1)
            {
                ObjectUtil.update(permit,"riscCategory","1");
                if(ObjectUtil.hasValue(permit,"riscOverride", "true"))
                {
                    ObjectUtil.update(permit,"riscOverride","false");
                    ObjectUtil.update(permit,"riscOverrideReason","");
                }
            }

            ObjectUtil.update(permit,"ruleRiscCategory","1");

            drools.modifyObject(permit);
        </java:consequence>
    </rule>
    -->

    <!-- normal risk rules -->
    <!--
    <rule name="set normal risk on escavation" salience="1000">
        <parameter identifier="permit"><class>PermitIF</class></parameter>
        <java:condition>ObjectUtil.hasValue(permit,"wwGravenRequired","Yes")</java:condition>
        <java:condition>ObjectUtil.notHasAnyValue(permit,"ruleRiscCategory", "1,3")</java:condition>
        <java:consequence>
            int raAdvice = PermitUtil.getRiskAssessmentRiskAdvice(permit);

            if(raAdvice != 1 &amp;&amp; raAdvice != 3 )
            {
                if(ObjectUtil.hasAnyValue(permit,"riscCategory", "3,2,0"))
                {
                    ObjectUtil.update(permit,"riscCategory","3");
                    ObjectUtil.update(permit,"riscOverride","false");
                    ObjectUtil.update(permit,"riscOverrideReason","");
                }
                else if(ObjectUtil.hasAnyValue(permit,"riscCategory", "1") &amp;&amp; !ObjectUtil.hasValue(permit,"riscOverride","true"))
                {
                    ObjectUtil.update(permit,"riscCategory","3");
                }
            }

            ObjectUtil.update(permit,"ruleRiscCategory","3");

            drools.modifyObject(permit);
        </java:consequence>
    </rule>
    -->



    <!-- risk determination cleanup : always ecexute ad the last riskdetermination rule-->
    <rule name="cleanup risk determination" salience="1">
        <parameter identifier="permit"><class>PermitIF</class></parameter>
        <java:condition>ObjectUtil.isNotEmpty(permit,"tmp_rrd_initialized")</java:condition>
        <java:consequence>
            permit.removeAbstractAttribute("tmp_rrd_initialized");
        </java:consequence>
    </rule>

    <!-- END RISK DETERMINATION RULES ON PERMIT -->

    <!-- BIJZONDERE RICHTLIJNEN -->
    <rule name="decorator besloten ruimte - procedure besloten ruimte">
        <parameter identifier="permit"><class>PermitIF</class></parameter>
        <java:condition>ObjectUtil.hasValue(permit,"wwBetredenBeslotenRuimteRequired","Yes")</java:condition>
        <java:condition>ObjectUtil.isNotSet(permit,"bijzRichtlijnenProcedureBeslotenRuimteRequired")</java:condition>
        <java:consequence>ObjectUtil.update(permit,"bijzRichtlijnenProcedureBeslotenRuimteRequired","Yes");</java:consequence>
    </rule>

</rule-set>
